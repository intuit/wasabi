#!/bin/sh
###############################################################################
# Copyright 2016 Intuit
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################

logging_default=file
red=`tput setaf 9`
green=`tput setaf 10`
reset=`tput sgr0`

usage() {
  [ "${1}" ] && echo "${red}error: ${1}${reset}"

  cat << EOF
${green}
usage: `basename ${0}` [options]

options:
  -l | --logging [ file | console ]      : logging location; default ${logging_default}
  -h | --help                            : help message

${reset}
EOF

  exit ${2:-0}
}

optspec=":l-:"

while getopts "${optspec}" opt; do
  case "${opt}" in
    -)
      case "${OPTARG}" in
        logging) logging="${!OPTIND}"; OPTIND=$(( ${OPTIND} + 1 ));;
        logging=*) logging="${OPTARG#*=}";;
        help) usage;;
        *) [ "${OPTERR}" = 1 ] && [ "${optspec:0:1}" != ":" ] && echo "unknown option --${OPTARG}";;
      esac;;
    l) logging=${OPTARG};;
    h) usage;;
    :) usage "option -${OPTARG} requires an argument" 1;;
    \?) [ "${OPTERR}" != 1 ] || [ "${optspec:0:1}" = ":" ] && usage "unknown option -${OPTARG}" 1;;
  esac
done

logging=${logging:=${logging_default}}

HOME_DIR=${application.home}
JMX_PORT=${application.jmx.port}
DEBUG_PORT=${application.debug.port}
LOG_DIR=${log.dir}
MAIN=${application.main}
DAEMON=\${WASABI_DAEMON:-${application.daemon.enable}}
CONSOLE_LOG=\${LOG_DIR}/${application.name}-console.log
CLASSPATH=\${HOME_DIR}/conf:\${HOME_DIR}/lib/${application.name}-all.jar
HEAP_SIZE=${application.heapsize}

JAVA_OPTIONS="
  -Xms\${HEAP_SIZE}\
  -Xmx\${HEAP_SIZE}\
  -server\
  ${application.instrument}\
  ${application.monitor}\
  -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=\${LOG_DIR}/java_$$.hprof\
  -XX:+UseConcMarkSweepGC -XX:+UseParNewGC\
  -verbose:gc\
  -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCApplicationStoppedTime\
  -XX:+PrintGCApplicationConcurrentTime -XX:+PrintTenuringDistribution\
  -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=\${DEBUG_PORT}\
  -Djava.rmi.server.hostname=`hostname`\
  -Dcom.sun.management.jmxremote=true\
  -Dcom.sun.management.jmxremote.port=\${JMX_PORT}\
  -Dcom.sun.management.jmxremote.ssl=false\
  -Dcom.sun.management.jmxremote.authenticate=false\
  -Djava.util.logging.config.file=\${HOME_DIR}/conf/logging.properties\
  ${WASABI_CONFIGURATION}"

echo "Info: Logging to ${logging} enabled"
if [ "${logging}" = "file" ]; then
  JAVA_OPTIONS="
    ${JAVA_OPTIONS}\
    -Xloggc:\${LOG_DIR}/gc.log\
    -Dlogback.configurationFile=\${HOME_DIR}/conf/logback.xml"
else
  JAVA_OPTIONS="
    ${JAVA_OPTIONS}\
    -Dlogback.configurationFile=\${HOME_DIR}/conf/logback-console.xml"
fi

# if JAVA_HOME is not set, set it based on OS
if [ "$JAVA_HOME" = "" ]; then
  if [ -f /usr/libexec/java_home ]; then
    # OSX
    export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
  elif [ -d /usr/java/latest ]; then
    # Linux
    export JAVA_HOME=/usr/java/latest
  else
    echo "Error: JAVA_HOME could not be identified"
    exit 1
  fi
fi

if [ \${DAEMON} = "true" ]; then
  run_as="chpst -u ${application.user}:${application.group}"
fi

run_output="2>&1"
if [ "${logging}" = "file" ]; then
  run_output="1>>\${CONSOLE_LOG} ${run_output}"
fi

exec $run_as \${JAVA_HOME}/bin/java \${JAVA_OPTIONS} -cp \${CLASSPATH} \${MAIN} $run_output
